@model NewsModel

@{
    ViewBag.Title = @Resource("Admin.Edit");
}
@Html.Partial("Breadcrumb", new Dictionary<string, string> { { @Resource("Admin.News"), "/Admin/News" }, { @Resource("Admin.Edit"), "#" } })

<link rel="stylesheet" type="text/css" href="http://xoxco.com/projects/code/tagsinput/jquery.tagsinput.css" />
<script src="~/Content/editors/tinymce/tiny_mce.js"></script>


<div class="row-fluid">
    <div class="box span12">
        <div class="box-header well">
            <ul class="nav nav-tabs">
                <li class="active"><a href="#edit">@Resource("Admin.Info")</a></li>
                <li><a href="#seo">@Resource("Admin.Seo")</a></li>
                <li><a href="#Pictures">@Resource("Admin.Picture")</a></li>
                <li><a href="#Category">@Resource("Admin.CatMap")</a></li>
            </ul>
        </div>
        <div class="box-content">

            @using (Html.BeginForm("Edit", "News", FormMethod.Post, new { @class = "form-horizontal" }))
            {
                <div class="tab-content">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(model => model.Id)
                    @Html.HiddenFor(model => model.CreatedDate)
                    <div class="tab-pane active" id="edit">
                        <fieldset>
                            @Html.ValidationSummary(true)
                            @Html.HiddenFor(model => model.Id)
                            <div class="control-group">
                                @Html.LabelFor(model => model.LanguageId, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.DropDownListFor(model => model.LanguageId, new SelectList(Model.AvailableLanguages, "Value", "Text"), new { @data_rel = "chosen" })
                                    @Html.ValidationMessageFor(model => model.LanguageId)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.Title, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.TextBoxFor(model => model.Title, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.Title)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.Short, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.TextAreaFor(model => model.Short, new { @class = "span6 typeahead", @rows = "5" })
                                    @Html.ValidationMessageFor(model => model.Short)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.Full, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Full, "RichEditor", new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.Full)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.Tags, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Tags, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.Tags)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.Published, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.Published, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.Published)
                                </div>
                            </div>

                            <div class="control-group hidden">
                                @Html.LabelFor(model => model.AllowComments, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.EditorFor(model => model.AllowComments, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.AllowComments)
                                </div>
                            </div>

                            <div class="control-group">
                                @Html.LabelFor(model => model.StartDate, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.TextBoxFor(model => model.StartDate, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.StartDate)
                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label">Maps</label>
                                <div class="controls">
                                    <div class="input-append span12">
                                        <input class="span6" id="maps" type="text">
                                        @Html.HiddenFor(model => model.Latitude, new { id = "Latitude" })
                                        @Html.HiddenFor(model => model.Longitude, new { id = "Longitude" })
                                        <button class="btn" onclick="CreateMap();" type="button"><i class=" icon-map-marker"></i></button>
                                    </div>
                                    <span class="field-validation-valid" data-valmsg-for="StartDate" data-valmsg-replace="true"></span>
                                </div>
                            </div>
                            <div class="control-group hidden">
                                @Html.LabelFor(model => model.EndDate, new { @class = "control-label" })
                                <div class="controls">
                                    @Html.TextBoxFor(model => model.EndDate, new { @class = "span6 typeahead" })
                                    @Html.ValidationMessageFor(model => model.EndDate)
                                </div>
                            </div>

                            <div class="form-actions">
                                <button id="btnSave" type="submit" class="btn btn-primary">@Resource("Admin.Save")</button>
                                <a class="btn btn-cancel" href="@Url.Action(" ", " news", new { area="Admin" },null)">@Resource("Admin.Exit")</a>
                            </div>
                        </fieldset>
                    </div>
                    <div class="tab-pane" id="seo">
                        <div class="control-group">
                            @Html.LabelFor(model => model.MetaTitle, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(model => model.MetaTitle, new { @class = "span6 typeahead" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.MetaDescription, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextAreaFor(model => model.MetaDescription, new { @rows = "5", @class = "span6 typeahead" })
                            </div>
                        </div>
                        <div class="control-group">
                            @Html.LabelFor(model => model.MetaKeywords, new { @class = "control-label" })
                            <div class="controls">
                                @Html.TextBoxFor(model => model.MetaKeywords, new { @class = "span6 typeahead" })
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" id="Pictures">
                        @if (Model.Id == 0)
                        {
                            <p>You need to save the news before you can upload pictures for this news page.</p>
                        }
                        else
                        {
                            <div id="tb_pic">
                                @Html.Partial("_PartialAllPicture", Model.News_Picture)
                            </div>
                            <div class="control-group">
                                <label class="control-label" for="Picture">@Resource("Admin.Picture")</label>
                                <div class="controls">
                                    <img class="imgsNews" src="" style="width:100px" />
                                    <input id="fileInput" name="fileInput" type="file">
                                    <input class="UrlPath" name="UrlPath" type="hidden">

                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label" for="Display order:">@Resource("Admin.DisplayOrder")</label>
                                <div class="controls">
                                    <input id="picOrder" name="DisplayOrder" type="number" value="1">
                                </div>
                            </div>
                            <div class="form-actions">
                                <button id="addPicture" type="button" class="btn btn-primary">@Resource("Admin.AddNewsPicture")</button>
                            </div>
                        }

                    </div>
                    <div id="Category" class="tab-pane">
                        @if (Model.Id == 0)
                        {
                            <p>You need to save the news before you add category.</p>
                        }
                        else
                        {
                            <div id="tb_cat">
                                @Html.Partial("_PartialCategoryMapping", Model.News_Category)
                            </div>
                            <div class="control-group">
                                <label class="control-label" for="Display order:">@Resource("Admin.CatName")</label>
                                <div class="controls">
                                    @Html.DropDownList("catID", new SelectList(Model.AvailableCategory, "Value", "Text"), new { @data_rel = "chosen" })
                                </div>
                            </div>
                            <div class="control-group">
                                <label class="control-label" for="Display order:">@Resource("Admin.DisplayOrder")</label>
                                <div class="controls">
                                    <input id="catOrder" name="DisplayOrder" type="number" value="1">
                                </div>
                            </div>
                            <div class="form-actions">
                                <button id="addCategory" type="button" class="btn btn-primary">@Resource("Admin.AddCatMap")</button>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-body">
        <style>
            #mapCanvas {
                width: 500px;
                height: 400px;
                float: left;
            }

            #infoPanel {
                float: left;
                margin-left: 10px;
            }

                #infoPanel div {
                    margin-bottom: 5px;
                }
        </style>

        <div id="mapCanvas"></div>
        <div id="infoPanel" class="hidden">
            <b>Marker status:</b>
            <div id="markerStatus"><i>Click and drag the marker.</i></div>
            <b>Current position:</b>
            <div id="info"></div>
            <b>Closest matching address:</b>
            <div id="address"></div>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>
        <button class="btn btn-primary" onclick="$('#myModal').modal('hide');" id="addPicture">Ok</button>
    </div>
</div>

<style>
    .tab-content {
        overflow: initial !important;
    }

    #content .nav-tabs > li > a {
        line-height: 15px !important;
    }

    .chzn-container .chzn-results .active-result {
        color: black;
        text-shadow: none;
    }
</style>

@section ScriptCustom {
    <script src="~/Content/js/jquery.uploadify-3.1.min.js"></script>
    <script type="text/javascript" src="http://xoxco.com/projects/code/tagsinput/jquery.tagsinput.js"></script>
    <script src="~/Content/js/bootstrap-tab.js"></script>
    <!-- select or dropdown enhancer -->
    <script src="~/Content/js/jquery.chosen.min.js"></script>
    <script>

        function UpdatePicture(){
            $.post( "@Url.Action("AllPicture", "News", new { @NewsID = Model.Id })", function( data ) {
                $( "#tb_pic" ).html(data);
            });
        }

        function UpdateCategory(){
            $.post( "@Url.Action("AllCategory", "News", new { @NewsID = Model.Id })", function( data ) {
                $( "#tb_cat" ).html(data);
            });
        }

        $(document).ready(function () {
            $('#content .nav-tabs a:first').tab('show');
            $('#content .nav-tabs a').click(function (e) {
                e.preventDefault();
                $(this).tab('show');
            });
            //chosen - improves select
            $('[data-rel="chosen"],[rel="chosen"]').chosen();
            $('#Tags').tagsInput({
                width: '90%'
            });

            $('#btnSave').click(function (event) {
                showPopUpStatus('@Resource("Admin.UpdateData")');
                tinyMCE.triggerSave();
                event.preventDefault();
                $.post('@Url.Action("Edit", "News")', $('.form-horizontal').serialize(), function (data) {
                    if (data.success) {
                        popUp(false, '@Resource("Admin.UpdateSuccess")', true, document.referrer);
                    } else {
                        popUp(true, data.message, false);
                    }
                });
            });

            $('#addPicture').click(function (event) {
                event.preventDefault();
                $.post(
                    '@Url.Action("AddPicture", "News")',
                    {
                        NewsID: @Model.Id ,
                        DisplayOrder: $("#picOrder").val(),
                        UrlPath: $('.UrlPath').val()
                    },
                    function (data) {
                        if (data.success) {
                            UpdatePicture();
                        }
                    });
                return false;
            });

            $('#addCategory').click(function (event) {
                event.preventDefault();
                $.post(
                    '@Url.Action("AddCategory", "News")',
                    {
                        NewsID: @Model.Id ,
                        DisplayOrder: $("#catOrder").val(),
                        CategoryID : $('#catID').val()
                    },
                    function (data) {
                        if (data.success) {
                            UpdateCategory();
                        }
                    });
            });


            $('#fileInput').uploadify({
                'swf': '@Url.Content("~/content/js/flash/uploadify.swf")',
                'uploader': "@Url.Action("UploadFiles", "Upload",new { area="" },null)",
                'multi': false,
                'fileExt': '*.jpg;*.jpeg;*.gif;*.png',
                'formData':
                        {
                            'type': 1
                        },
                'onUploadSuccess': function (file, data, response) {
                    $(".imgsNews").attr('src', data);
                    $(".UrlPath").val(data);
                }
            });

        });
    </script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?language=vn&sensor=false"></script>
    <script type="text/javascript">
        var geocoder = new google.maps.Geocoder();
        var map;
        var marker;
        function geocodePosition(pos) {
            geocoder.geocode({
                latLng: pos
            }, function (responses) {
                if (responses && responses.length > 0) {
                    updateMarkerAddress(responses[0].formatted_address);
                } else {
                    updateMarkerAddress('Cannot determine address at this location.');
                }
            });
        }

        function updateMarkerStatus(str) {
            document.getElementById('markerStatus').innerHTML = str;
        }

        function updateMarkerPosition(latLng) {
            document.getElementById('info').innerHTML = [
              latLng.lat(),
              latLng.lng()
            ].join(',');
            $('#maps').val([
              latLng.lat(),
              latLng.lng()
            ].join(','));
            $("#Latitude").val(latLng.lat());
            $("#Longitude").val(latLng.lng());
        }

        function updateMarkerAddress(str) {
            document.getElementById('address').innerHTML = str;
        }

        function initialize() {
            var latLng;
            if(document.getElementById('Latitude').value != "")
            {
                var lat = parseFloat(document.getElementById('Latitude').value);
                var lng = parseFloat(document.getElementById('Longitude').value);
                latLng = new google.maps.LatLng(lat, lng);
            }
            else
                latLng = new google.maps.LatLng(10.81820986240789, 106.65886206054688);
            map = new google.maps.Map(document.getElementById('mapCanvas'), {
                zoom: 8,
                center: latLng,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            });
            marker = new google.maps.Marker({
                position: latLng,
                title: 'Point A',
                map: map,
                draggable: true
            });

            // Update current position info.
            updateMarkerPosition(latLng);
            geocodePosition(latLng);

            // Add dragging event listeners.
            google.maps.event.addListener(marker, 'dragstart', function () {
                updateMarkerAddress('Dragging...');
            });

            google.maps.event.addListener(marker, 'drag', function () {
                updateMarkerStatus('Dragging...');
                updateMarkerPosition(marker.getPosition());
            });

            google.maps.event.addListener(marker, 'dragend', function () {
                updateMarkerStatus('Drag ended');
                geocodePosition(marker.getPosition());
            });
        }

        // Onload handler to fire off the app.
        var IsCreate = false;
        function CreateMap()
        {

            $('#myModal').modal('show');
            if(!IsCreate)
            {
                setTimeout(function(){
                    initialize();
                },1000)
            }
            if(document.getElementById('Latitude').value != "")
            {
                var lat = parseFloat(document.getElementById('Latitude').value);
                var lng = parseFloat(document.getElementById('Longitude').value);
                var latLng = new google.maps.LatLng(lat, lng);
                marker.setPosition(latLng);
            }
            IsCreate = true;
        }


    </script>
}



